swagger: '2.0'

info:
  description: >-
    Quoridorn Web APIのドキュメントです。<br>
    `/config/server.yaml`の`webApiPathBase`の値が、各APIのパスの先頭に付与される点をご留意ください。<br>
    リクエスト例）(host)/(webApiPathBase)/v1/token
  version: 1.0.0
  title: Quoridorn REST API
  license:
    name: AGPL-3.0 License
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
host: (host)
basePath: /(webApiPathBase)
schemes:
  - https
  - http
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

securityDefinitions:
  token_auth:
    type: "apiKey"
    name: "Authentication"
    in: "header"

tags:
  - name: token
    description: |-
      トークン取得に関するAPI
  - name: rooms
    description: |-
      部屋情報に関するAPI
  - name: users
    description: ユーザー情報に関するAPI
  - name: chat
    description: チャットに関するAPI（未実装）

paths:
  /v1/token:
    get:
      tags:
        - token
      summary: サーバー管理者用トークンを取得する
      operationId: getServerToken
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: サーバーパスワード（`/config/server.yaml`の`webApiPassword`の値）
      produces:
        - application/json
      responses:
        '200':
          description: 成功
          schema:
            $ref: '#/definitions/TokenGetResponse'
        '400':
          description: パラメータが不足しています
        '401':
          description: サーバーパスワードが違います `Wrong server password.`
        '500':
          description: パスワード照合処理で致命的なエラーが発生しています `Verify process fatal error.`

  /v1/rooms/{roomNo}/token:
    get:
      tags:
        - token
      summary: 部屋情報アクセス用トークンを取得する
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        どちらの認証をとっても、レスポンスは同じです。
      operationId: getRoomToken
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: >-
            ２通りの認証におけるこの項目の値のフォーマットは以下の通りです。<br>
            [標準ユーザー] {部屋パスワード}<br>
            [サーバー管理者ユーザー] Bearer {サーバー管理者用トークン}<br>
            <br>
            部屋パスワード: 部屋作成時に指定したもの<br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `{部屋パスワード}`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
      produces:
        - application/json
      responses:
        '200':
          description: 成功
          schema:
            $ref: '#/definitions/TokenGetResponse'
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが必要です `Need token.`<br>
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの種類が違います（サーバー情報用トークンを指定してください） `Different types token. Need server Token.`<br>
            パスワードが違います `Wrong password.`
        '406':
          description: 部屋番号に対応する部屋情報が存在しません `Room not found.`
        '500':
          description: パスワード照合処理で致命的なエラーが発生しています `Verify process fatal error.`
      security:
        - token_auth: []

  /v1/rooms/{roomNo}/users/{userId}/token:
    get:
      tags:
        - token
      summary: ユーザー情報アクセス用トークンを取得する
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        どちらの認証をとっても、レスポンスは同じです。
      operationId: getUserToken
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: >-
            ２通りの認証におけるこの項目の値のフォーマットは以下の通りです。<br>
            [標準ユーザー] Bearer {部屋情報アクセス用トークン}/{ユーザーパスワード}<br>
            [サーバー管理者ユーザー] Bearer {サーバー管理者用トークン}<br>
            <br>
            部屋情報アクセス用トークン: `/v1/rooms/{roomNo}/token`で発行しておいたもの<br>
            ユーザーパスワード: 入室時にユーザー情報として指定したもの<br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6/{ユーザーパスワード}`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
        - name: userId
          in: path
          description: ユーザーID
          required: true
          type: string
          format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: 成功
          schema:
            $ref: '#/definitions/TokenGetResponse'
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが必要です `Need token.`<br>
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（部屋情報用トークンを指定してください） `Different types token. Need room Token.`<br>
            パスワードが違います `Wrong password.`
        '406':
          description: >-
            部屋が違います `Different room.`<br>
            部屋番号に対応する部屋情報が存在しません `Room not found.`<br>
            ユーザーIDに対応するユーザー情報が存在しません `User not found.`
        '500':
          description: パスワード照合処理で致命的なエラーが発生しています `Verify process fatal error.`
      security:
        - token_auth: []

  /v1/rooms:
    get:
      tags:
        - rooms
      summary: 部屋情報の一覧を取得する
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        標準ユーザーで認証した場合、レスポンス項目の一部（必須項目でないもの）が返却されません。
      operationId: getRooms
      parameters:
        - name: Authorization
          in: header
          required: false
          type: string
          format: Bearer {サーバー管理者用トークン}
          description: >-
            このパラメータを指定された場合、サーバー管理者ユーザーでの認証とみなします。<br>
            <br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
      produces:
        - application/json
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
              rooms:
                type: array
                items:
                  $ref: '#/definitions/RoomInfo'
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの種類が違います（サーバー情報用トークンを指定してください） `Different types token. Need server Token.`

  /v1/rooms/{roomNo}:
    get:
      tags:
        - rooms
      summary: 部屋情報を取得する
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        標準ユーザーで認証した場合、レスポンス項目の一部（必須項目でないもの）が返却されません。
      operationId: getRoom
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          format: Bearer {token}
          description: >-
            ２通りの認証におけるこの項目の値のフォーマットは以下の通りです。<br>
            [標準ユーザー] Bearer {部屋情報アクセス用トークン}<br>
            [サーバー管理者ユーザー] Bearer {サーバー管理者用トークン}<br>
            <br>
            部屋情報アクセス用トークン: `/v1/rooms/{roomNo}/token`で発行しておいたもの<br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
              room:
                $ref: '#/definitions/RoomInfo'
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが必要です `Need token.`<br>
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（部屋情報用トークンを指定してください） `Different types token. Need room Token.`
        '406':
          description: >-
            部屋が違います `Different room.`<br>
            部屋番号に対応する部屋情報が存在しません `Room not found.`
      security:
        - token_auth: []

    delete:
      tags:
        - rooms
      summary: 部屋情報を削除する
      description: >-
        このリクエストはサーバー管理者ユーザー専用です。
      operationId: deleteRoom
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          format: Bearer {サーバー管理者用トークン}
          description: >-
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが必要です `Need token.`<br>
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（管理者用トークンを指定してください） `Different types token. Need admin Token.`
        '406':
          description: >-
            部屋番号に対応する部屋情報が存在しません `Room not found.`
      security:
        - token_auth: []

  /v1/rooms/{roomNo}/users:
    get:
      tags:
        - users
      summary: ユーザー情報の一覧を取得する
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        標準ユーザーで認証した場合、レスポンス項目の一部（必須項目でないもの）が返却されません。
      operationId: getUsers
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          format: Bearer {token}
          description: >-
            ２通りの認証におけるこの項目の値のフォーマットは以下の通りです。<br>
            [標準ユーザー] Bearer {部屋情報アクセス用トークン}<br>
            [サーバー管理者ユーザー] Bearer {サーバー管理者用トークン}<br>
            <br>
            部屋情報アクセス用トークン: `/v1/rooms/{roomNo}/token`で発行しておいたもの<br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
              users:
                type: array
                items:
                  $ref: '#/definitions/UserInfo'
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが必要です `Need token.`<br>
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（部屋情報用トークンを指定してください） `Different types token. Need room Token.`
        '406':
          description: >-
            部屋が違います `Different room.`<br>
            部屋番号に対応する部屋情報が存在しません `Room not found.`
      security:
        - token_auth: []

  /v1/rooms/{roomNo}/users/{userId}:
    get:
      tags:
        - users
      summary: ユーザー情報を取得する
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        標準ユーザーで認証した場合、レスポンス項目の一部（必須項目でないもの）が返却されません。
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          format: Bearer {token}
          description: >-
            ２通りの認証におけるこの項目の値のフォーマットは以下の通りです。<br>
            [標準ユーザー] Bearer {ユーザー情報アクセス用トークン}<br>
            [サーバー管理者ユーザー] Bearer {サーバー管理者用トークン}<br>
            <br>
            ユーザー情報アクセス用トークン: `/v1/rooms/{roomNo}/users/{userId}/token`で発行しておいたもの<br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
        - name: userId
          in: path
          description: ユーザーID
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
              user:
                $ref: '#/definitions/UserInfo'
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（ユーザー情報用トークンを指定してください） `Different types token. Need user Token.`
        '406':
          description: >-
            部屋が違います `Different room.`<br>
            部屋番号に対応する部屋情報が存在しません `Room not found.`<br>
            ユーザーが違います `Different user.`<br>
            ユーザーIDに対応するユーザー情報が存在しません `User not found.`
      security:
        - token_auth: []

  /v1/rooms/chat:
    post:
      tags:
        - chat
      summary: 全ての部屋に対してチャット発言を登録する
      deprecated: true
      description: >-
        このリクエストはサーバー管理者ユーザー専用です。<br>
        発言情報としてサーバー管理者からのものであることが記録されます。<br>
        （Quoridornクライアントで表示される際に装飾されます）
      operationId: postRoomsChat
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          format: Bearer {サーバー管理者用トークン}
          description: >-
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChatPostRequestBody'
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（部屋情報用トークンを指定してください） `Different types token. Need room Token.`
      security:
        - token_auth: []

  /v1/rooms/{roomNo}/chat:
    post:
      tags:
        - chat
      summary: チャット発言を登録する
      deprecated: true
      description: >-
        このリクエストは２通りの認証があります。<br>
        ・標準ユーザー<br>
        ・サーバー管理者ユーザー<br>
        認証方法によって、HTTPリクエストヘッダーの項目「Authorization」の指定の仕方を変えてください。<br>
        サーバー管理者ユーザーで認証された場合は発言情報としてサーバー管理者からのものであることが記録されます。<br>
        （Quoridornクライアントで表示される際に装飾されます）
      operationId: postRoomChat
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          format: Bearer {token}
          description: >-
            ２通りの認証におけるこの項目の値のフォーマットは以下の通りです。<br>
            [標準ユーザー] Bearer {部屋情報アクセス用トークン}<br>
            [サーバー管理者ユーザー] Bearer {サーバー管理者用トークン}<br>
            <br>
            部屋情報アクセス用トークン: `/v1/rooms/{roomNo}/token`で発行しておいたもの<br>
            サーバー管理者用トークン: `/v1/token`で発行しておいたもの<br>
            <br>
            設定値の例)<br>
            [標準ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`<br>
            [サーバー管理者ユーザー] `Bearer 3fa85f64-5717-4562-b3fc-2c963f66afa6`
        - name: roomNo
          in: path
          description: 部屋番号
          required: true
          type: integer
          minimum: 0
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChatPostRequestBody'
      responses:
        '200':
          description: 成功
          schema:
            type: object
            properties:
              result:
                type: boolean
                default: true
              chatId:
                type: string
                format: uuid
        '400':
          description: パラメータが不足しています
        '401':
          description: >-
            トークンが無効です `Invalid token.`<br>
            トークンが有効期限切れです `Expired token.`<br>
            トークンの対象が違います `Different token target.`<br>
            トークンの種類が違います（部屋情報用トークンを指定してください） `Different types token. Need room Token.`
        '406':
          description: >-
            部屋が違います `Different room.`<br>
            部屋番号に対応する部屋情報が存在しません `Room not found.`<br>
            ユーザーIDに対応するユーザー情報が存在しません `User not found.`
      security:
        - token_auth: []


definitions:
  TokenGetResponse:
    type: object
    properties:
      result:
        type: boolean
        default: true
      token:
        type: string
        format: uuid
      expires:
        type: string
        format: date-time
        description: トークンの有効期限（`/config/server.yaml`の`webApiTokenExpires`の項目が有効期間の指定）

  RoomInfo:
    type: object
    required:
      - roomNo
      - name
    properties:
      roomNo:
        type: integer
        description: 部屋番号
      name:
        type: string
        description: 部屋名
      memberNum:
        type: integer
        description: 入室人数(接続数ではなくユーザー数)
      bcdiceServer:
        type: string
        description: BCDice-APIサーバの向き先
      system:
        type: string
        description: 選択されているダイスボット
      roomCollectionPrefix:
        type: string
        description: 部屋情報Collectionの接頭句
      storageId:
        type: string
        description: s3サーバーに保存される際の共通パス
      createTime:
        type: string
        description: この部屋情報が作成された日時
      updateTime:
        type: string
        description: この部屋情報が更新された日時

  UserInfo:
    type: object
    required:
      - roomNo
      - userId
      - name
      - type
    properties:
      roomNo:
        type: integer
        description: 部屋番号
      userId:
        type: string
        format: uuid
        description: ユーザーID
      name:
        type: string
        description: ユーザー名
      type:
        type: string
        description: ユーザー種別
        enum: [
          GM,
          PL,
          VISITOR
        ]
      login:
        type: integer
        description: ログインしている接続数
      createTime:
        type: string
        description: この部屋情報が作成された日時
      updateTime:
        type: string
        description: この部屋情報が更新された日時

  ChatPostRequestBody:
    type: object
    required:
      - userId
      - text
    properties:
      userId:
        type: string
        format: uuid
      text:
        type: string
